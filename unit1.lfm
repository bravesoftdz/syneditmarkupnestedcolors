object Form1: TForm1
  Left = 273
  Height = 358
  Top = 119
  Width = 630
  Caption = 'Form1'
  ClientHeight = 358
  ClientWidth = 630
  OnCreate = FormCreate
  LCLVersion = '1.5'
  inline SynEdit1: TSynEdit
    Left = 0
    Height = 272
    Top = 0
    Width = 630
    Align = alClient
    Font.Height = -13
    Font.Name = 'Courier New'
    Font.Pitch = fpFixed
    Font.Quality = fqNonAntialiased
    ParentColor = False
    ParentFont = False
    TabOrder = 0
    Gutter.Width = 65
    Gutter.MouseActions = <>
    RightGutter.Width = 0
    RightGutter.MouseActions = <>
    Highlighter = SynFreePascalSyn1
    Keystrokes = <    
      item
        Command = ecUp
        ShortCut = 38
      end    
      item
        Command = ecSelUp
        ShortCut = 8230
      end    
      item
        Command = ecScrollUp
        ShortCut = 16422
      end    
      item
        Command = ecDown
        ShortCut = 40
      end    
      item
        Command = ecSelDown
        ShortCut = 8232
      end    
      item
        Command = ecScrollDown
        ShortCut = 16424
      end    
      item
        Command = ecLeft
        ShortCut = 37
      end    
      item
        Command = ecSelLeft
        ShortCut = 8229
      end    
      item
        Command = ecWordLeft
        ShortCut = 16421
      end    
      item
        Command = ecSelWordLeft
        ShortCut = 24613
      end    
      item
        Command = ecRight
        ShortCut = 39
      end    
      item
        Command = ecSelRight
        ShortCut = 8231
      end    
      item
        Command = ecWordRight
        ShortCut = 16423
      end    
      item
        Command = ecSelWordRight
        ShortCut = 24615
      end    
      item
        Command = ecPageDown
        ShortCut = 34
      end    
      item
        Command = ecSelPageDown
        ShortCut = 8226
      end    
      item
        Command = ecPageBottom
        ShortCut = 16418
      end    
      item
        Command = ecSelPageBottom
        ShortCut = 24610
      end    
      item
        Command = ecPageUp
        ShortCut = 33
      end    
      item
        Command = ecSelPageUp
        ShortCut = 8225
      end    
      item
        Command = ecPageTop
        ShortCut = 16417
      end    
      item
        Command = ecSelPageTop
        ShortCut = 24609
      end    
      item
        Command = ecLineStart
        ShortCut = 36
      end    
      item
        Command = ecSelLineStart
        ShortCut = 8228
      end    
      item
        Command = ecEditorTop
        ShortCut = 16420
      end    
      item
        Command = ecSelEditorTop
        ShortCut = 24612
      end    
      item
        Command = ecLineEnd
        ShortCut = 35
      end    
      item
        Command = ecSelLineEnd
        ShortCut = 8227
      end    
      item
        Command = ecEditorBottom
        ShortCut = 16419
      end    
      item
        Command = ecSelEditorBottom
        ShortCut = 24611
      end    
      item
        Command = ecToggleMode
        ShortCut = 45
      end    
      item
        Command = ecCopy
        ShortCut = 16429
      end    
      item
        Command = ecPaste
        ShortCut = 8237
      end    
      item
        Command = ecDeleteChar
        ShortCut = 46
      end    
      item
        Command = ecCut
        ShortCut = 8238
      end    
      item
        Command = ecDeleteLastChar
        ShortCut = 8
      end    
      item
        Command = ecDeleteLastChar
        ShortCut = 8200
      end    
      item
        Command = ecDeleteLastWord
        ShortCut = 16392
      end    
      item
        Command = ecUndo
        ShortCut = 32776
      end    
      item
        Command = ecRedo
        ShortCut = 40968
      end    
      item
        Command = ecLineBreak
        ShortCut = 13
      end    
      item
        Command = ecSelectAll
        ShortCut = 16449
      end    
      item
        Command = ecCopy
        ShortCut = 16451
      end    
      item
        Command = ecBlockIndent
        ShortCut = 24649
      end    
      item
        Command = ecLineBreak
        ShortCut = 16461
      end    
      item
        Command = ecInsertLine
        ShortCut = 16462
      end    
      item
        Command = ecDeleteWord
        ShortCut = 16468
      end    
      item
        Command = ecBlockUnindent
        ShortCut = 24661
      end    
      item
        Command = ecPaste
        ShortCut = 16470
      end    
      item
        Command = ecCut
        ShortCut = 16472
      end    
      item
        Command = ecDeleteLine
        ShortCut = 16473
      end    
      item
        Command = ecDeleteEOL
        ShortCut = 24665
      end    
      item
        Command = ecUndo
        ShortCut = 16474
      end    
      item
        Command = ecRedo
        ShortCut = 24666
      end    
      item
        Command = ecGotoMarker0
        ShortCut = 16432
      end    
      item
        Command = ecGotoMarker1
        ShortCut = 16433
      end    
      item
        Command = ecGotoMarker2
        ShortCut = 16434
      end    
      item
        Command = ecGotoMarker3
        ShortCut = 16435
      end    
      item
        Command = ecGotoMarker4
        ShortCut = 16436
      end    
      item
        Command = ecGotoMarker5
        ShortCut = 16437
      end    
      item
        Command = ecGotoMarker6
        ShortCut = 16438
      end    
      item
        Command = ecGotoMarker7
        ShortCut = 16439
      end    
      item
        Command = ecGotoMarker8
        ShortCut = 16440
      end    
      item
        Command = ecGotoMarker9
        ShortCut = 16441
      end    
      item
        Command = ecSetMarker0
        ShortCut = 24624
      end    
      item
        Command = ecSetMarker1
        ShortCut = 24625
      end    
      item
        Command = ecSetMarker2
        ShortCut = 24626
      end    
      item
        Command = ecSetMarker3
        ShortCut = 24627
      end    
      item
        Command = ecSetMarker4
        ShortCut = 24628
      end    
      item
        Command = ecSetMarker5
        ShortCut = 24629
      end    
      item
        Command = ecSetMarker6
        ShortCut = 24630
      end    
      item
        Command = ecSetMarker7
        ShortCut = 24631
      end    
      item
        Command = ecSetMarker8
        ShortCut = 24632
      end    
      item
        Command = ecSetMarker9
        ShortCut = 24633
      end    
      item
        Command = EcFoldLevel1
        ShortCut = 41009
      end    
      item
        Command = EcFoldLevel2
        ShortCut = 41010
      end    
      item
        Command = EcFoldLevel3
        ShortCut = 41011
      end    
      item
        Command = EcFoldLevel4
        ShortCut = 41012
      end    
      item
        Command = EcFoldLevel5
        ShortCut = 41013
      end    
      item
        Command = EcFoldLevel6
        ShortCut = 41014
      end    
      item
        Command = EcFoldLevel7
        ShortCut = 41015
      end    
      item
        Command = EcFoldLevel8
        ShortCut = 41016
      end    
      item
        Command = EcFoldLevel9
        ShortCut = 41017
      end    
      item
        Command = EcFoldLevel0
        ShortCut = 41008
      end    
      item
        Command = EcFoldCurrent
        ShortCut = 41005
      end    
      item
        Command = EcUnFoldCurrent
        ShortCut = 41003
      end    
      item
        Command = EcToggleMarkupWord
        ShortCut = 32845
      end    
      item
        Command = ecNormalSelect
        ShortCut = 24654
      end    
      item
        Command = ecColumnSelect
        ShortCut = 24643
      end    
      item
        Command = ecLineSelect
        ShortCut = 24652
      end    
      item
        Command = ecTab
        ShortCut = 9
      end    
      item
        Command = ecShiftTab
        ShortCut = 8201
      end    
      item
        Command = ecMatchBracket
        ShortCut = 24642
      end    
      item
        Command = ecColSelUp
        ShortCut = 40998
      end    
      item
        Command = ecColSelDown
        ShortCut = 41000
      end    
      item
        Command = ecColSelLeft
        ShortCut = 40997
      end    
      item
        Command = ecColSelRight
        ShortCut = 40999
      end    
      item
        Command = ecColSelPageDown
        ShortCut = 40994
      end    
      item
        Command = ecColSelPageBottom
        ShortCut = 57378
      end    
      item
        Command = ecColSelPageUp
        ShortCut = 40993
      end    
      item
        Command = ecColSelPageTop
        ShortCut = 57377
      end    
      item
        Command = ecColSelLineStart
        ShortCut = 40996
      end    
      item
        Command = ecColSelLineEnd
        ShortCut = 40995
      end    
      item
        Command = ecColSelEditorTop
        ShortCut = 57380
      end    
      item
        Command = ecColSelEditorBottom
        ShortCut = 57379
      end>
    MouseActions = <>
    MouseTextActions = <>
    MouseSelActions = <>
    Lines.Strings = (
      'function TKernelResampler.GetSampleFloat(X, Y: TFloat): TColor32;'
      'var'
      '  Filter: TFilterMethod;'
      '  WrapProcVert: TWrapProcEx absolute Filter; //line has keyword ''absolute'''
      ' '
      '  OuterPremultColorR, OuterPremultColorG, OuterPremultColorB: Byte;'
      ''
      'begin'
      ''
      '  if not found then begin found := true; end else '
      '  begin found := not found; end;'
      '  KWidth := Ceil(FKernel.GetWidth);'
      ''
      '  clX := Ceil(X);'
      '  clY := Ceil(Y);'
      ''
      '  case PixelAccessMode of'
      '    pamUnsafe, pamWrap:'
      '      begin'
      '        LoX := -KWidth; HiX := KWidth;'
      '        LoY := -KWidth; HiY := KWidth;'
      '      end;'
      ''
      '    pamSafe, pamTransparentEdge:'
      '      begin'
      '        with ClipRect do'
      '        begin'
      '          if not ((clX < Left) or (clX > Right) or (clY < Top) or (clY > Bottom)) then'
      '          begin'
      '            Edge := False;'
      ''
      '            if clX - KWidth < Left then'
      '            begin'
      '              LoX := Left - clX;'
      '              Edge := True;'
      '            end'
      '            else'
      '              LoX := -KWidth;'
      ''
      '            if clX + KWidth >= Right then'
      '            begin'
      '              HiX := Right - clX - 1;'
      '              Edge := True;'
      '            end'
      '            else'
      '              HiX := KWidth;'
      ''
      '            if clY - KWidth < Top then'
      '            begin'
      '              LoY := Top - clY;'
      '              Edge := True;'
      '            end'
      '            else'
      '              LoY := -KWidth;'
      ''
      '            if clY + KWidth >= Bottom then'
      '            begin'
      '              HiY := Bottom - clY - 1;'
      '              Edge := True;'
      '            end'
      '            else'
      '              HiY := KWidth;'
      ''
      '          end'
      '          else'
      '          begin'
      '            if PixelAccessMode = pamTransparentEdge then'
      '              Result := 0'
      '            else'
      '              Result := FOuterColor;'
      '            Exit;'
      '          end;'
      ''
      '        end;'
      '      end;'
      '  end;'
      ''
      '  case FKernelMode of'
      '    kmDynamic:'
      '      begin'
      '        Filter := FKernel.Filter;'
      '        fracXS := clX - X;'
      '        fracYS := clY - Y;'
      ''
      '        PHorzKernel := @HorzKernel;'
      '        PVertKernel := @VertKernel;'
      ''
      '        Dev := -256;'
      '        for I := -KWidth to KWidth do'
      '        begin'
      '          W := Round(Filter(I + fracXS) * 256);'
      '          HorzKernel[I] := W;'
      '          Inc(Dev, W);'
      '        end;'
      '        Dec(HorzKernel[0], Dev);'
      ''
      '        Dev := -256;'
      '        for I := -KWidth to KWidth do'
      '        begin'
      '          W := Round(Filter(I + fracYS) * 256);'
      '          VertKernel[I] := W;'
      '          Inc(Dev, W);'
      '        end;'
      '        Dec(VertKernel[0], Dev);'
      ''
      '      end;'
      '    kmTableNearest:'
      '      begin'
      '        W := FWeightTable.Height - 2;'
      '        PHorzKernel := @FWeightTable.ValPtr[KWidth - MAX_KERNEL_WIDTH, Round((clX - X) * W)]^;'
      '        PVertKernel := @FWeightTable.ValPtr[KWidth - MAX_KERNEL_WIDTH, Round((clY - Y) * W)]^;'
      '      end;'
      '    kmTableLinear:'
      '      begin'
      '        W := (FWeightTable.Height - 2) * $10000;'
      '        J := FWeightTable.Width * 4;'
      ''
      '        with TFixedRec(FracX) do'
      '        begin'
      '          Fixed := Round((clX - X) * W);'
      '          PHorzKernel := @HorzKernel;'
      '          FloorKernel := @FWeightTable.ValPtr[KWidth - MAX_KERNEL_WIDTH, Int]^;'
      '          {$IFDEF HAS_NATIVEINT}'
      '          CeilKernel := PKernelEntry(NativeUInt(FloorKernel) + J);'
      '          {$ELSE}'
      '          CeilKernel := PKernelEntry(Cardinal(FloorKernel) + J);'
      '          {$ENDIF}'
      '          Dev := -256;'
      '          for I := -KWidth to KWidth do'
      '          begin'
      '            Wv :=  FloorKernel[I] + ((CeilKernel[I] - FloorKernel[I]) * Frac + $7FFF) div FixedOne;'
      '            HorzKernel[I] := Wv;'
      '            Inc(Dev, Wv);'
      '          end;'
      '          Dec(HorzKernel[0], Dev);'
      '        end;'
      ''
      '        with TFixedRec(FracY) do'
      '        begin'
      '          Fixed := Round((clY - Y) * W);'
      '          PVertKernel := @VertKernel;'
      '          FloorKernel := @FWeightTable.ValPtr[KWidth - MAX_KERNEL_WIDTH, Int]^;'
      '          {$IFDEF HAS_NATIVEINT}'
      '          CeilKernel := PKernelEntry(NativeUInt(FloorKernel) + J);'
      '          {$ELSE}'
      '          CeilKernel := PKernelEntry(Cardinal(FloorKernel) + J);'
      '          {$ENDIF}'
      '          Dev := -256;'
      '          for I := -KWidth to KWidth do'
      '          begin'
      '            Wv := FloorKernel[I] + ((CeilKernel[I] - FloorKernel[I]) * Frac + $7FFF) div FixedOne;'
      '            VertKernel[I] := Wv;'
      '            Inc(Dev, Wv);'
      '          end;'
      '          Dec(VertKernel[0], Dev);'
      '        end;'
      '      end;'
      ''
      '  end;'
      ''
      '  VertEntry := EMPTY_ENTRY;'
      '  case PixelAccessMode of'
      '    pamUnsafe, pamSafe, pamTransparentEdge:'
      '      begin'
      '        SrcP := PColor32Entry(Bitmap.PixelPtr[LoX + clX, LoY + clY]);'
      '        Incr := Bitmap.Width - (HiX - LoX) - 1;'
      '        for I := LoY to HiY do'
      '        begin'
      '          Wv := PVertKernel[I];'
      '          if Wv <> 0 then'
      '          begin'
      '            HorzEntry := EMPTY_ENTRY;'
      '            for J := LoX to HiX do'
      '            begin'
      '              // Alpha=0 should not contribute to sample.'
      '              Alpha := SrcP.A;'
      '              if (Alpha <> 0) then'
      '              begin'
      '                W := PHorzKernel[J];'
      '                Inc(HorzEntry.A, Alpha * W);'
      '                // Sample premultiplied values'
      '                if (Alpha = 255) then'
      '                begin'
      '                  Inc(HorzEntry.R, SrcP.R * W);'
      '                  Inc(HorzEntry.G, SrcP.G * W);'
      '                  Inc(HorzEntry.B, SrcP.B * W);'
      '                end else'
      '                begin'
      '                  Inc(HorzEntry.R, Integer(Div255(Alpha * SrcP.R)) * W);'
      '                  Inc(HorzEntry.G, Integer(Div255(Alpha * SrcP.G)) * W);'
      '                  Inc(HorzEntry.B, Integer(Div255(Alpha * SrcP.B)) * W);'
      '                end;'
      '              end;'
      '              Inc(SrcP);'
      '            end;'
      '            Inc(VertEntry.A, HorzEntry.A * Wv);'
      '            Inc(VertEntry.R, HorzEntry.R * Wv);'
      '            Inc(VertEntry.G, HorzEntry.G * Wv);'
      '            Inc(VertEntry.B, HorzEntry.B * Wv);'
      '          end else Inc(SrcP, HiX - LoX + 1);'
      '          Inc(SrcP, Incr);'
      '        end;'
      ''
      '        if (PixelAccessMode = pamSafe) and Edge then'
      '        begin'
      '          Alpha := TColor32Entry(FOuterColor).A;'
      ''
      '          // Alpha=0 should not contribute to sample.'
      '          if (Alpha <> 0) then'
      '          begin'
      '            // Sample premultiplied values'
      '            OuterPremultColorR := Integer(Div255(Alpha * TColor32Entry(FOuterColor).R));'
      '            OuterPremultColorG := Integer(Div255(Alpha * TColor32Entry(FOuterColor).G));'
      '            OuterPremultColorB := Integer(Div255(Alpha * TColor32Entry(FOuterColor).B));'
      ''
      '            for I := -KWidth to KWidth do'
      '            begin'
      '              Wv := PVertKernel[I];'
      '              if Wv <> 0 then'
      '              begin'
      '                HorzEntry := EMPTY_ENTRY;'
      '                for J := -KWidth to KWidth do'
      '                  if (J < LoX) or (J > HiX) or (I < LoY) or (I > HiY) then'
      '                  begin'
      '                    W := PHorzKernel[J];'
      '                    Inc(HorzEntry.A, Alpha * W);'
      '                    Inc(HorzEntry.R, OuterPremultColorR * W);'
      '                    Inc(HorzEntry.G, OuterPremultColorG * W);'
      '                    Inc(HorzEntry.B, OuterPremultColorB * W);'
      '                  end;'
      '                Inc(VertEntry.A, HorzEntry.A * Wv);'
      '                Inc(VertEntry.R, HorzEntry.R * Wv);'
      '                Inc(VertEntry.G, HorzEntry.G * Wv);'
      '                Inc(VertEntry.B, HorzEntry.B * Wv);'
      '              end;'
      '            end'
      '          end;'
      '        end;'
      '      end;'
      ''
      '    pamWrap:'
      '      begin'
      '        WrapProcHorz := GetWrapProcEx(Bitmap.WrapMode, ClipRect.Left, ClipRect.Right - 1);'
      '        WrapProcVert := GetWrapProcEx(Bitmap.WrapMode, ClipRect.Top, ClipRect.Bottom - 1);'
      ''
      '        for I := -KWidth to KWidth do'
      '          MappingX[I] := WrapProcHorz(clX + I, ClipRect.Left, ClipRect.Right - 1);'
      ''
      '        for I := -KWidth to KWidth do'
      '        begin'
      '          Wv := PVertKernel[I];'
      '          if Wv <> 0 then'
      '          begin'
      '            MappingY := WrapProcVert(clY + I, ClipRect.Top, ClipRect.Bottom - 1);'
      '            Colors := PColor32EntryArray(Bitmap.ScanLine[MappingY]);'
      '            HorzEntry := EMPTY_ENTRY;'
      '            for J := -KWidth to KWidth do'
      '            begin'
      '              C := Colors[MappingX[J]];'
      '              Alpha := C.A;'
      '              // Alpha=0 should not contribute to sample.'
      '              if (Alpha <> 0) then'
      '              begin'
      '                W := PHorzKernel[J];'
      '                Inc(HorzEntry.A, Alpha * W);'
      '                // Sample premultiplied values'
      '                if (Alpha = 255) then'
      '                begin'
      '                  Inc(HorzEntry.R, C.R * W);'
      '                  Inc(HorzEntry.G, C.G * W);'
      '                  Inc(HorzEntry.B, C.B * W);'
      '                end else'
      '                begin'
      '                  Inc(HorzEntry.R, Div255(Alpha * C.R) * W);'
      '                  Inc(HorzEntry.G, Div255(Alpha * C.G) * W);'
      '                  Inc(HorzEntry.B, Div255(Alpha * C.B) * W);'
      '                end;'
      '              end;'
      '            end;'
      '            Inc(VertEntry.A, HorzEntry.A * Wv);'
      '            Inc(VertEntry.R, HorzEntry.R * Wv);'
      '            Inc(VertEntry.G, HorzEntry.G * Wv);'
      '            Inc(VertEntry.B, HorzEntry.B * Wv);'
      '          end;'
      '        end;'
      '      end;'
      '  end;'
      ''
      '  // Round and unpremultiply result'
      '  with TColor32Entry(Result) do'
      '  begin'
      '    if FKernel.RangeCheck then'
      '    begin'
      '      A := Clamp(TFixedRec(Integer(VertEntry.A + FixedHalf)).Int);'
      '      if (A = 255) then'
      '      begin'
      '        R := Clamp(TFixedRec(Integer(VertEntry.R + FixedHalf)).Int);'
      '        G := Clamp(TFixedRec(Integer(VertEntry.G + FixedHalf)).Int);'
      '        B := Clamp(TFixedRec(Integer(VertEntry.B + FixedHalf)).Int);'
      '      end else'
      '      if (A <> 0) then'
      '      begin'
      '        R := Clamp(TFixedRec(Integer(VertEntry.R + FixedHalf)).Int * 255 div A);'
      '        G := Clamp(TFixedRec(Integer(VertEntry.G + FixedHalf)).Int * 255 div A);'
      '        B := Clamp(TFixedRec(Integer(VertEntry.B + FixedHalf)).Int * 255 div A);'
      '      end else'
      '      begin'
      '        R := 0;'
      '        G := 0;'
      '        B := 0;'
      '      end;'
      '    end'
      '    else'
      '    begin'
      '      A := TFixedRec(Integer(VertEntry.A + FixedHalf)).Int;'
      '      if (A = 255) then'
      '      begin'
      '        R := TFixedRec(Integer(VertEntry.R + FixedHalf)).Int;'
      '        G := TFixedRec(Integer(VertEntry.G + FixedHalf)).Int;'
      '        B := TFixedRec(Integer(VertEntry.B + FixedHalf)).Int;'
      '      end else'
      '      if (A <> 0) then'
      '      begin'
      '        R := TFixedRec(Integer(VertEntry.R + FixedHalf)).Int * 255 div A;'
      '        G := TFixedRec(Integer(VertEntry.G + FixedHalf)).Int * 255 div A;'
      '        B := TFixedRec(Integer(VertEntry.B + FixedHalf)).Int * 255 div A;'
      '      end else'
      '      begin'
      '        R := 0;'
      '        G := 0;'
      '        B := 0;'
      '      end;'
      '    end;'
      '  end;'
      'end;'
      '{$WARNINGS ON}'
    )
    VisibleSpecialChars = [vscSpace, vscTabAtLast]
    SelectedColor.BackPriority = 50
    SelectedColor.ForePriority = 50
    SelectedColor.FramePriority = 50
    SelectedColor.BoldPriority = 50
    SelectedColor.ItalicPriority = 50
    SelectedColor.UnderlinePriority = 50
    SelectedColor.StrikeOutPriority = 50
    BracketHighlightStyle = sbhsBoth
    BracketMatchColor.Background = clNone
    BracketMatchColor.Foreground = clNone
    BracketMatchColor.Style = [fsBold]
    FoldedCodeColor.Background = clNone
    FoldedCodeColor.Foreground = clGray
    FoldedCodeColor.FrameColor = clGray
    MouseLinkColor.Background = clNone
    MouseLinkColor.Foreground = clBlue
    LineHighlightColor.Background = clNone
    LineHighlightColor.Foreground = clNone
    inline SynLeftGutterPartList1: TSynGutterPartList
      object SynGutterMarks1: TSynGutterMarks
        Width = 24
        MouseActions = <>
      end
      object SynGutterLineNumber1: TSynGutterLineNumber
        Width = 25
        MouseActions = <>
        MarkupInfo.Background = clBtnFace
        MarkupInfo.Foreground = clNone
        DigitCount = 2
        ShowOnlyLineNumbersMultiplesOf = 1
        ZeroStart = False
        LeadingZeros = False
      end
      object SynGutterChanges1: TSynGutterChanges
        Width = 4
        MouseActions = <>
        ModifiedColor = 59900
        SavedColor = clGreen
      end
      object SynGutterSeparator1: TSynGutterSeparator
        Width = 2
        MouseActions = <>
        MarkupInfo.Background = clWhite
        MarkupInfo.Foreground = clGray
      end
      object SynGutterCodeFolding1: TSynGutterCodeFolding
        MouseActions = <>
        MarkupInfo.Background = clNone
        MarkupInfo.Foreground = clGray
        MouseActionsExpanded = <>
        MouseActionsCollapsed = <>
      end
    end
  end
  object Panel1: TPanel
    Left = 0
    Height = 86
    Top = 272
    Width = 630
    Align = alBottom
    Caption = 'Panel1'
    TabOrder = 1
    Visible = False
  end
  object SynPasSyn1: TSynPasSyn
    Enabled = False
    DirectiveAttri.Foreground = clTeal
    CompilerMode = pcmDelphi
    NestedComments = False
    left = 306
    top = 81
  end
  object SynFreePascalSyn1: TSynFreePascalSyn
    Enabled = False
    DirectiveAttri.Foreground = clFuchsia
    CompilerMode = pcmObjFPC
    NestedComments = True
    left = 416
    top = 88
  end
end
